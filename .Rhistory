}
a=rnorm(100)
b=rnorm(100)
theilsen(a,b)
#My function example
set.seed(4009464)
y=rnorm(10)
x=rnorm(10)
y
x
theilsen=function(y,x){
n=length(y)
s=matrix(NA,n,n)
for(i in 1:n){
for(l in 1:n){
s[i,l] = (y[i]-y[l])/(x[i]-x[l])
}
}
s
diag(s)=NA
s
betatilde=(median(s,na.rm=T))
return(betatilde)
}
a=rnorm(100)
b=rnorm(100)
theilsen(a,b)
#My function example
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
set.seed(4009464)
y=rnorm(10)
x=rnorm(10)
y
x
theilsen=function(y,x){
n=length(y)
s=matrix(NA,n,n)
for(i in 1:n){
for(l in 1:n){
s[i,l] = (y[i]-y[l])/(x[i]-x[l])
}
}
s
diag(s)=NA
s
betatilde=(median(s,na.rm=T))
return(betatilde)
}
a=rnorm(100)
b=rnorm(100)
theilsen(a,b)
#Load advertising data and apply function to sales=alpha+beta*TV
#to estimate beta
#Compar with lm estimate of beta
adv=read.csv("advertising.csv")
View(adv)
View(adv)
#My function example
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
set.seed(4009464)
y=rnorm(10)
x=rnorm(10)
y
x
theilsen=function(y,x){
n=length(y)
s=matrix(NA,n,n)
for(i in 1:n){
for(l in 1:n){
s[i,l] = (y[i]-y[l])/(x[i]-x[l])
}
}
s
diag(s)=NA
s
betatilde=(median(s,na.rm=T))
return(betatilde)
}
a=rnorm(100)
b=rnorm(100)
theilsen(a,b)
#Load advertising data and apply function to sales=alpha+beta*TV
#to estimate beta
#Compare with lm estimate of beta
adv=read.csv("advertising.csv")
y=adv$sales
x=adv$TV
beta=theilsen()
beta=theilsen(y,x)
beta
adv=read.csv("advertising.csv",row.names=1)
y=adv$sales
x=adv$TV
beta=theilsen(y,x)
beta
adv=read.csv("advertising.csv",row.names=1)
y=adv$sales
x=adv$TV
beta=theilsen(y,x)
beta
betalm=lm(adv$sales ~ adv$TV)
install.packages("rmarkdown")
---
title: "My project"
author: "Federico Castelletti"
date: "May, 13, 2022"
output: html_document
fig_caption: yes
---
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>
<!------------------------------------
Don't care about the previous preamble
------------------------------------->
<!--
Within these symbols I can write my comments, not to be shown in the html document
This is our first R Markdown document.
R Markdown is a file format for writing documents using R.
It combines the syntax of markdown (a text format) and the syntax of R
-->
<!-- To create sections, write ## Title of the section -->
## Dataset
<!--
The following is called "chunk"
Each chunk has a name
The name must be in the form 'r + some text'
For instance 'r data'
All chunks must have different names!
-->
```{r data, echo = TRUE}
---
title: "My project"
author: "Federico Castelletti"
date: "May, 13, 2022"
output: html_document
fig_caption: yes
---
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>
<!------------------------------------
Don't care about the previous preamble
------------------------------------->
<!--
Within these symbols I can write my comments, not to be shown in the html document
This is our first R Markdown document.
R Markdown is a file format for writing documents using R.
It combines the syntax of markdown (a text format) and the syntax of R
-->
<!-- To create sections, write ## Title of the section -->
## Dataset
<!--
The following is called "chunk"
Each chunk has a name
The name must be in the form 'r + some text'
For instance 'r data'
All chunks must have different names!
-->
```{r data, echo = TRUE}
states = read.csv("states", row.names = 1)
states = read.csv("states", row.names = 1)
<!--
Within a chunk you can write R commands
With the option 'echo = TRUE' you can choose whether (TRUE) or not (FALSE) to include the R command in the html document
-->
<!--
I can write some text simply as follows:
-->
The dataset contains some rows and some columns.
<!--
Or, even better, by adapting my text to the output of an R command, such as
'nrow(states)' and 'ncol(states)'
-->
<!--
To include the output of an R command within the text, use
`r nrow(states)`
-->
The dataset contains `r nrow(states)` rows and `r ncol(states)` columns.
The following table contains the first 6 rows of the dataset and the first 5 columns.
```{r head data, echo = TRUE}
head(states)[,1:5]
head(states)[,1:5]
<!--
Improved layout of my table can be obtained using the function 'kable'
within package knitr, as for instance knitr::kable(head(states)[,1:5])
-->
\vspace{1cm}\
## Summary statistics
The following are summary statistics for variable Murder
```{r summary, echo = TRUE}
summary(states$Murder)
summary(states$Murder)
\vspace{1cm}\
## Plots
```{r attach, echo = FALSE, message = FALSE}
attach(states)
attach(states)
```{r plot, echo = FALSE, fig.width = 5, fig.height = 4}
plot(Murder, Life.Exp, xlab = "Murders", ylab = "Life expectancy")
plot(Murder, Life.Exp, xlab = "Murders", ylab = "Life expectancy")
This plot represents life expectancy as a function of number of murders.
We now consider the following simple linear model for variables $Y$ (Murder) and
$X$ (Life Expectancy)
<!--
You can write equations as follows.
Also, you can assign a label to each equation; you can use this label to refer to the equation without needing to explicitly writing the equation numbering
-->
\begin{equation}
Y = \beta_0 + \beta_1 X + \varepsilon
\label{eq:linear}
\end{equation}
<!--
Name (label) of my equation is 'eq:linear'; the numbering of equations is automatically adapted by R markdown -->
Equation $\eqref{eq:linear}$ corresponds to a simple linear model.
I now want to fit the linear model to my data.
To do this, I use the function $\texttt{lm}$
```{r lm, echo = TRUE}
setwd("C:/Users/feder/Downloads")
---
title: "My project"
author: "Federico Castelletti"
date: "May, 13, 2022"
output: html_document
fig_caption: yes
---
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>
<!------------------------------------
Don't care about the previous preamble
------------------------------------->
<!--
Within these symbols I can write my comments, not to be shown in the html document
This is our first R Markdown document.
R Markdown is a file format for writing documents using R.
It combines the syntax of markdown (a text format) and the syntax of R
-->
<!-- To create sections, write ## Title of the section -->
## Dataset
<!--
The following is called "chunk"
Each chunk has a name
The name must be in the form 'r + some text'
For instance 'r data'
All chunks must have different names!
-->
```{r data, echo = TRUE}
states = read.csv("states", row.names = 1)
states = read.csv("states", row.names = 1)
<!--
Within a chunk you can write R commands
With the option 'echo = TRUE' you can choose whether (TRUE) or not (FALSE) to include the R command in the html document
-->
<!--
I can write some text simply as follows:
-->
The dataset contains some rows and some columns.
<!--
Or, even better, by adapting my text to the output of an R command, such as
'nrow(states)' and 'ncol(states)'
-->
<!--
To include the output of an R command within the text, use
`r nrow(states)`
-->
The dataset contains `r nrow(states)` rows and `r ncol(states)` columns.
The following table contains the first 6 rows of the dataset and the first 5 columns.
```{r head data, echo = TRUE}
head(states)[,1:5]
head(states)[,1:5]
<!--
Improved layout of my table can be obtained using the function 'kable'
within package knitr, as for instance knitr::kable(head(states)[,1:5])
-->
\vspace{1cm}\
## Summary statistics
The following are summary statistics for variable Murder
```{r summary, echo = TRUE}
summary(states$Murder)
summary(states$Murder)
\vspace{1cm}\
## Plots
```{r attach, echo = FALSE, message = FALSE}
attach(states)
attach(states)
```{r plot, echo = FALSE, fig.width = 5, fig.height = 4}
plot(Murder, Life.Exp, xlab = "Murders", ylab = "Life expectancy")
plot(Murder, Life.Exp, xlab = "Murders", ylab = "Life expectancy")
This plot represents life expectancy as a function of number of murders.
We now consider the following simple linear model for variables $Y$ (Murder) and
$X$ (Life Expectancy)
<!--
You can write equations as follows.
Also, you can assign a label to each equation; you can use this label to refer to the equation without needing to explicitly writing the equation numbering
-->
\begin{equation}
Y = \beta_0 + \beta_1 X + \varepsilon
\label{eq:linear}
\end{equation}
<!--
Name (label) of my equation is 'eq:linear'; the numbering of equations is automatically adapted by R markdown -->
Equation $\eqref{eq:linear}$ corresponds to a simple linear model.
I now want to fit the linear model to my data.
To do this, I use the function $\texttt{lm}$
```{r lm, echo = TRUE}
out = lm(Murder ~ Life.Exp)
out = lm(Murder ~ Life.Exp)
Output is the following:
```{r lm out, echo = TRUE}
We see that $\hat{\beta}_0$ is `r round(out$coefficients[1],2)` while the slope is equal to `r round(out$coefficients[2],2)`.
\vspace{1cm}\
## Regression trees
```{r tree package, echo = FALSE}
library(tree)
Try to fit a regression tree to predict murder based on the other variables and display here the results.
\vspace{1cm}\
\vspace{1cm}\
states=read.csv("states", row.names=1)
head(states)
tree(...)
tree(Murder ~ .,data=states)
plot(tree)
text(tree, pretty=0)
tree=tree(Murder ~ .,data=states)
plot(tree)
text(tree, pretty=0)
Try to fit a regression tree to predict murder based on the other variables and display here the results.
{r tree fitting, echo=TRUE, tree=tree(Murder ~ .,data=states)}
library(tree)
library(tree)
print(class(s))
s="Hello World"
print(class(s))
print(s)
x=1.1
print(class(x))
print(summary(x))
plot(x)
print(x)
print(pi)
print(sqrt(-1))
print(1/0)
s<-"2004-04-22"
str(s)
d<-as.date(s)
d
str(d)
s<-"2004-04-22"
str(s)
d<-as.date(s)
d
str(d)
d<-as.Date(s)
d
str(d)
install.packages("zoo")
setwd("~/GitHub/Elaborato-Finale-TrEc")
library(foreign)
library(sandwich)
library(lmtest)
library(AER)
library(stargazer)
library(tseries)
library(dynlm)
library(forecast)
library(quantmod)
library(tsapp)
tilde <- rawToChar(as.raw(126)) #Command needed to use the Tilde character in the coding
EU=read.csv("Categorical_EPU_Data-ritaglio.csv",sep=";")
EU[,1]=as.Date.character(EU[,1], "%d/%m/%Y")
names(EU)[1]="DATE"
names(EU)[2]="EPU"
names(EU)[3]="MP"
names(EU)[4]="FP"
names(EU)[5]="TAX"
names(EU)[6]="GOV"
names(EU)[7]="HEALTH"
names(EU)[8]="DEFENSE"
names(EU)[9]="ENTITLEMENT"
names(EU)[10]="REG"
names(EU)[11]="FINREG"
names(EU)[12]="TRADE"
names(EU)[13]="DEBTCURRENCY"
unemployment=read.csv("UNRATE-tagliato.csv")
EU[14]=unemployment$UNRATE
names(EU)[14]="UNEMPLOYMENT"
proxy=read.csv("instruments_web-ritaglio.csv",sep=";")
names(proxy)[1]="DATE"
names(proxy)[2]="IS-FOMC"
names(proxy)[3]="IV4"
names(proxy)[4]="IV5"
EU[15]=proxy$IV4
names(EU)[15]="PROXY"
#First Regression
regressionbase=dynlm(EPU~Lag(EPU,1)+UNEMPLOYMENT+PROXY,data=EU)
HAC=coeftest(regressionbase, vcov. = vcovHAC(regressionbase)) #This is the code for HAC robust standard errors
ses=list(HAC[,2])
ps=list(HAC[,4])
stargazer(regressionbase,type="latex", se = ses, p = ps, p.auto = F)
stargazer(regressionbase,type="text", se = ses, p = ps, p.auto = F)
plot(Lag(EU$EPU)+EU$UNEMPLOYMENT+EU$PROXY,EU$EPU)
abline(regressionbase)
plot(regressionbase)
ps=list(HAC08[,4])
stargazer(regression2008,type="latex", se = ses, p = ps, p.auto = F)
stargazer(regression2008,type="text", se = ses, p = ps, p.auto = F)
plot(Lag(EU$EPU[1:204])+EU$UNEMPLOYMENT[1:204]+EU$PROXY[1:204],EU$EPU[1:204])
abline(regression2008)
plot(regression2008)
#Adding VXO time series data
VXO=read.csv("VXOCLS tagliato 1991 2008.csv",sep=";")
names(VXO)[1]="DATE"
names(VXO)[2]="VXO"
EU[16]=VXO[2]
#Using VXO as the dependent variable
newregression=dynlm(VXO~Lag(VXO,1)+UNEMPLOYMENT+PROXY,data=EU)
newHAC=coeftest(newregression, vcov. = vcovHAC(newregression))
ses=list(newHAC[,2])
ps=list(newHAC[,4])
stargazer(newregression, type = "text", se = ses, p = ps, p.auto = F)
stargazer(newregression, type = "latex", se = ses, p = ps, p.auto = F)
plot(EU$DATE,EU$VXO)
lines(EU$DATE,EU$VXO)
times=EU$DATE
times=times[-c(228)]
lines(times,newregression[["fitted.values"]], col="blue")
#Cutting the sample in 2008
newregression2008=dynlm(VXO~Lag(VXO,1)+UNEMPLOYMENT+PROXY,data=EU[1:204,])
newHAC2008=coeftest(newregression2008, vcov. = vcovHAC(newregression2008))
ses=list(newHAC2008[,2])
ps=list(newHAC2008[,4])
stargazer(newregression2008, type = "text", se = ses, p = ps, p.auto = F)
stargazer(newregression2008, type = "latex", se = ses, p = ps, p.auto = F)
#Adding DGS10 time series data
DGS10=read.csv("DGS10.csv",sep=",")
names(DGS10)[1]="DATE"
names(DGS10)[2]="DGS10"
EU[17]=DGS10[2]
#New regression with DGS10 as explanatory variable and EPU as dependent variable
newregressionbond=dynlm(EPU~Lag(EPU,1)+UNEMPLOYMENT+DGS10,data=EU)
HACbond=coeftest(newregressionbond, vcov. = vcovHAC(newregressionbond))
ses=list(HACbond[,2])
ps=list(HACbond[,4])
stargazer(newregressionbond, type = "text", se = ses, p = ps, p.auto = F)
plot(EU$DATE,EU$EPU)
lines(EU$DATE,EU$EPU)
times=EU$DATE
times=times[-c(228)]
lines(times,newregressionbond[["fitted.values"]], col="blue")
stargazer(newregressionbond, type = "latex", se = ses, p = ps, p.auto = F)
#New regression with DGS10 as explanatory variable and VXO as dependent variable
newregressionbondVXO=dynlm(VXO~Lag(VXO,1)+UNEMPLOYMENT+DGS10,data=EU)
HACbondVXO=coeftest(newregressionbondVXO, vcov. = vcovHAC(newregressionbondVXO))
ses=list(HACbondVXO[,2])
ps=list(HACbondVXO[,4])
stargazer(newregressionbondVXO, type = "text", se = ses, p = ps, p.auto = F)
plot(EU$DATE,EU$VXO)
lines(EU$DATE,EU$VXO)
times=EU$DATE
times=times[-c(228)]
lines(times,newregressionbondVXO[["fitted.values"]], col="blue")
stargazer(newregressionbondVXO, type = "latex", se = ses, p = ps, p.auto = F)
#Cutting the sample in 2008/06
newregressionbondVXO2008=dynlm(VXO~Lag(VXO,1)+UNEMPLOYMENT+DGS10,data=EU[1:210,])
HACbondVXO2008=coeftest(newregressionbondVXO2008, vcov. = vcovHAC(newregressionbondVXO2008))
ses=list(HACbondVXO2008[,2])
ps=list(HACbondVXO2008[,4])
stargazer(newregressionbondVXO2008, type = "text", se = ses, p = ps, p.auto = F)
stargazer(newregressionbondVXO2008, type = "latex", se = ses, p = ps, p.auto = F)
#Cutting the sample at the end of 2002
newregressionbondVXO2002=dynlm(VXO~Lag(VXO,1)+UNEMPLOYMENT+DGS10,data=EU[1:144,])
HACbondVXO2002=coeftest(newregressionbondVXO2002, vcov. = vcovHAC(newregressionbondVXO2002))
ses=list(HACbondVXO2002[,2])
ps=list(HACbondVXO2002[,4])
stargazer(newregressionbondVXO2002, type = "text", se = ses, p = ps, p.auto = F)
stargazer(newregressionbondVXO2002, type = "latex", se = ses, p = ps, p.auto = F)
plot(EU$DATE[1:144],EU$VXO[1:144])
lines(EU$DATE,EU$VXO)
times=EU$DATE
times=times[-c(144:228)]
lines(times,newregressionbondVXO2002[["fitted.values"]], col="blue")
#Adding the Federal Funds Rate data
FEDFUNDS=read.csv("FEDFUNDS.csv")
EU[18]=FEDFUNDS[2]
names(EU)[18]="FEDFUNDS"
#New regression with FEDFUNDS as explanatory variable and VXO as dependent variable
regressionfed=dynlm(VXO~Lag(VXO,1)+UNEMPLOYMENT+FEDFUNDS,data=EU[1:144,])
HACfed=coeftest(regressionfed, vcov.=vcovHAC(regressionfed))
ses=list(HACfed[,2])
ps=list(HACfed[,4])
stargazer(regressionfed, type = "text", se = ses, p = ps, p.auto = F)
stargazer(regressionfed, type = "latex", se = ses, p = ps, p.auto = F)
plot(EU$DATE[1:144],EU$VXO[1:144])
lines(EU$DATE,EU$VXO)
times=EU$DATE
times=times[-c(144:228)]
lines(times,regressionfed[["fitted.values"]], col="blue")
library(strucchange)
#perform Chow test on the regression with hypothesized structural break in 2003
sctest(VXO ~ Lag(VXO,1)+UNEMPLOYMENT+DGS10, type = "Chow", data=EU[1:144,])
#Very good results, points to the presence of a real structural break and a deviation from the Taylor Rule
plot(EU$DATE,EU$VXO)
times=EU$DATE
times=times[-c(228)]
lines(times, newregressionbondVXO[["fitted.values"]], col="blue")
